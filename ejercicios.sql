--* 4.1.1 - Obtenga el color y ciudad para las partes que no son de París, con un peso mayor de diez.
CREATE OR REPLACE PROCEDURE OBTENER_COLOR_CIUDAD_NO_PARIS
AS
    CURSOR PARTS_CURSOR IS
        SELECT P.PNAME, P.COLOR, P.CITY
        FROM PARTS P
        WHERE P.CITY <> 'Paris' AND P.WEIGHT > 10;
BEGIN
    FOR PARTS_REC IN PARTS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('Nombre: ' || PARTS_REC.PNAME || ', Color: ' || PARTS_REC.COLOR || ', Ciudad: ' || PARTS_REC.CITY);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    OBTENER_COLOR_CIUDAD_NO_PARIS;
END;

--* 4.1.2 - Para todas las partes, obtenga el número de parte y el peso de dichas partes en gramos.
CREATE OR REPLACE PROCEDURE OBTENER_NUMERO_Y_PESO_DE_PARTES
AS
    CURSOR PARTS_CURSOR IS
        SELECT P.PNUM, P.WEIGHT * 453.6 AS WEIGHT_G
        FROM PARTS P;
BEGIN
    FOR PARTS_REC IN PARTS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('Número de Parte: ' || PARTS_REC.PNUM || ', Peso (g): ' || PARTS_REC.WEIGHT_G);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    OBTENER_NUMERO_Y_PESO_DE_PARTES;
END;

--* 4.1.3 - Obtenga el detalle completo de todos los proveedores.
CREATE OR REPLACE PROCEDURE DETALLE_COMPLETO_PROVEEDORES
AS
    CURSOR SUPPLIERS_CURSOR IS
        SELECT S.*
        FROM SUPPLIERS S;
BEGIN
    FOR SUPPLIERS_REC IN SUPPLIERS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('N° Proveedor: ' || SUPPLIERS_REC.SNUM || ', Nombre: ' || SUPPLIERS_REC.SNAME || ', Ciudad: ' || SUPPLIERS_REC.CITY || ', Estado: ' || SUPPLIERS_REC.STATUS);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    DETALLE_COMPLETO_PROVEEDORES;
END;

--* 4.1.4 - Obtenga todas las combinaciones de proveedores y partes para aquellos proveedores y partes co-localizados.
CREATE OR REPLACE PROCEDURE COMBINACIONES_PROVEEDORES_PARTES_CO_LOCALIZADOS
AS
    CURSOR COMBINATIONS_CURSOR IS
        SELECT S.SNUM, S.SNAME, P.PNUM, P.PNAME
        FROM SUPPLIERS S
        JOIN PARTS P USING (CITY);
BEGIN
    FOR COMBINATIONS_REC IN COMBINATIONS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('N° Proveedor: ' || COMBINATIONS_REC.SNUM || ', Nombre: ' || COMBINATIONS_REC.SNAME || ', N° Parte: ' || COMBINATIONS_REC.PNUM || ', Nombre: ' || COMBINATIONS_REC.PNAME);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN   
    COMBINACIONES_PROVEEDORES_PARTES_CO_LOCALIZADOS;
END;

--* 4.1.5 - Obtenga todos los pares de nombres de ciudades de tal forma que el proveedor localizado en la primera ciudad del par abastece una parte almacenada en la segunda ciudad del par.
CREATE OR REPLACE PROCEDURE PARES_CIUDADES_PROVEEDOR_PARTE
AS
    CURSOR SHIPMENTS_CURSOR IS
        SELECT DISTINCT S.CITY AS S_CITY, P.CITY AS P_CITY
        FROM SHIPMENTS
        JOIN SUPPLIERS S USING (SNUM)
        JOIN PARTS P USING (PNUM);
BEGIN
    FOR SHIPMENTS_REC IN SHIPMENTS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('Ciudad Proveedor: ' || SHIPMENTS_REC.S_CITY || ', Ciudad Parte: ' || SHIPMENTS_REC.P_CITY);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN   
    PARES_CIUDADES_PROVEEDOR_PARTE;
END;

--* 4.1.6 - Obtenga todos los pares de número de proveedor tales que los dos proveedores del par estén co-localizados.
CREATE OR REPLACE PROCEDURE PARES_NUMERO_PROVEEDOR_COLOCALIZADOS
AS
    CURSOR SUPPLIERS_CURSOR IS
        SELECT DISTINCT S1.SNUM AS SNUM1, S2.SNUM AS SNUM2
        FROM SUPPLIERS S1
        JOIN SUPPLIERS S2 USING (CITY);
BEGIN
    FOR SUPPLIERS_REC IN SUPPLIERS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('N° Prov. 1:' || SUPPLIERS_REC.SNUM1 || ', N° Prov. 2: ' || SUPPLIERS_REC.SNUM2);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    PARES_NUMERO_PROVEEDOR_COLOCALIZADOS;
END;

--* 4.1.7 - Obtenga el número total de proveedores.
CREATE OR REPLACE FUNCTION TOTAL_PROVEEDORES
RETURN NUMBER
AS
    TOTAL_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO TOTAL_COUNT FROM SUPPLIERS;
    RETURN TOTAL_COUNT;
END;
-- Test
SET SERVEROUTPUT ON;
DECLARE
    TOTAL_SUPPLIERS NUMBER;
BEGIN
    TOTAL_SUPPLIERS := TOTAL_PROVEEDORES;
    DBMS_OUTPUT.PUT_LINE('Total de Proveedores: ' || TOTAL_SUPPLIERS);
END;

--* 4.1.8 - Obtenga la cantidad mínima y la cantidad máxima para la parte P2.
CREATE OR REPLACE PROCEDURE CANTIDAD_MINIMA_MAXIMA_PARTE (
    P_PNUM IN SHIPMENTS.PNUM%TYPE
)
AS
    MIN_QTY SHIPMENTS.QTY%TYPE;
    MAX_QTY SHIPMENTS.QTY%TYPE;
BEGIN
    SELECT MIN(S.QTY), MAX(S.QTY) INTO MIN_QTY, MAX_QTY
    FROM SHIPMENTS S
    WHERE PNUM = P_PNUM;
    DBMS_OUTPUT.PUT_LINE('Cantidad Mínima para P' || P_PNUM || ': ' || MIN_QTY || ', Cantidad Máxima: ' || MAX_QTY);
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    CANTIDAD_MINIMA_MAXIMA_PARTE(2);
END;

--* 4.1.9 - Para cada parte abastecida, obtenga el número de parte y el total despachado.
CREATE OR REPLACE PROCEDURE TOTAL_DESPACHADO_POR_PARTE
AS
    CURSOR TOTAL_SHIPMENTS_CURSOR IS
        SELECT S.PNUM, SUM(S.QTY) AS TOTAL_QTY
        FROM SHIPMENTS S
        GROUP BY S.PNUM;
BEGIN
    FOR TOTAL_SHIPMENTS_REC IN TOTAL_SHIPMENTS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('N° Parte: ' || TOTAL_SHIPMENTS_REC.PNUM || ', Total Despachado: ' || TOTAL_SHIPMENTS_REC.TOTAL_QTY);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    TOTAL_DESPACHADO_POR_PARTE;
END;

--* 4.1.10 - Obtenga el número de parte para todas las partes abastecidas por más de un proveedor.
CREATE OR REPLACE PROCEDURE PARTES_ABASTECIDAS_POR_MULTIPLES_PROVEEDORES
AS
    CURSOR PARTS_CURSOR IS
        SELECT S.PNUM
        FROM SHIPMENTS S
        GROUP BY S.PNUM
        HAVING COUNT(DISTINCT S.SNUM) > 1;
BEGIN
    FOR PARTS_REC IN PARTS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('N° Parte: ' || PARTS_REC.PNUM);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    PARTES_ABASTECIDAS_POR_MULTIPLES_PROVEEDORES;
END;

--* 4.1.11 - Obtenga el nombre de proveedor para todos los proveedores que abastecen la parte P2.
CREATE OR REPLACE PROCEDURE PROVEEDORES_QUE_ABASTECEN_PARTE (
    P_SNUM IN SUPPLIERS.SNUM%TYPE
)
AS
    CURSOR SUPPLIERS_CURSOR IS
        SELECT DISTINCT S.SNAME
        FROM SHIPMENTS SH
        JOIN SUPPLIERS S USING (SNUM)
        WHERE SH.PNUM = P_SNUM;
BEGIN
    FOR SUPPLIERS_REC IN SUPPLIERS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('Nombre Proveedor: ' || SUPPLIERS_REC.SNAME);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    PROVEEDORES_QUE_ABASTECEN_PARTE(2);
END;

--* 4.1.12 - Obtenga el nombre de proveedor de quienes abastecen por lo menos una parte.
CREATE OR REPLACE PROCEDURE PROVEEDORES_QUE_ABASTECEN_AL_MENOS_UNA_PARTE
AS
    CURSOR SUPPLIERS_CURSOR IS
        SELECT DISTINCT S.SNAME
        FROM SHIPMENTS SH
        JOIN SUPPLIERS S USING (SNUM);
BEGIN
    FOR SUPPLIERS_REC IN SUPPLIERS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('Nombre Proveedor: ' || SUPPLIERS_REC.SNAME);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    PROVEEDORES_QUE_ABASTECEN_AL_MENOS_UNA_PARTE;
END;

--* 4.1.13 - Obtenga el número de proveedor para los proveedores con estado menor que el máximo valor de estado en la tabla S.
CREATE OR REPLACE PROCEDURE PROVEEDORES_CON_ESTADO_MENOR_QUE_MAXIMO
AS
    MAX_STATUS SUPPLIERS.STATUS%TYPE;
    CURSOR SUPPLIERS_CURSOR IS
        SELECT S.SNUM
        FROM SUPPLIERS S
        WHERE S.STATUS < MAX_STATUS;
BEGIN
    SELECT MAX(S.STATUS) INTO MAX_STATUS FROM SUPPLIERS S;
    FOR SUPPLIERS_REC IN SUPPLIERS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('N° Proveedor: ' || SUPPLIERS_REC.SNUM);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    PROVEEDORES_CON_ESTADO_MENOR_QUE_MAXIMO;
END;

--* 4.1.14 - Obtenga el nombre de proveedor para los proveedores que abastecen la parte P2 (aplicar EXISTS en su solución).
CREATE OR REPLACE PROCEDURE PROVEEDORES_QUE_ABASTECEN_PARTE (
    P_PNUM IN PARTS.PNUM%TYPE
)
AS
    CURSOR SUPPLIERS_CURSOR IS
        SELECT S.SNAME
        FROM SUPPLIERS S
        WHERE EXISTS (
            SELECT 1
            FROM SHIPMENTS SP
            WHERE SP.SNUM = S.SNUM AND SP.PNUM = P_PNUM
        );
BEGIN
    FOR SUPPLIERS_REC IN SUPPLIERS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('Nombre Proveedor: ' || SUPPLIERS_REC.SNAME);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    PROVEEDORES_QUE_ABASTECEN_PARTE(2);
END;

--* 4.1.15 - Obtenga el nombre de proveedor para los proveedores que no abastecen la parte P2.
CREATE OR REPLACE PROCEDURE PROVEEDORES_QUE_NO_ABASTECEN_PARTE (
    P_PNUM IN PARTS.PNUM%TYPE
)
AS
    CURSOR SUPPLIERS_CURSOR IS
        SELECT S.SNAME
        FROM SUPPLIERS S
        WHERE NOT EXISTS (
            SELECT 1
            FROM SHIPMENTS SP
            WHERE SP.SNUM = S.SNUM AND SP.PNUM = P_PNUM
        );
BEGIN
    FOR SUPPLIERS_REC IN SUPPLIERS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('Nombre Proveedor: ' || SUPPLIERS_REC.SNAME);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    PROVEEDORES_QUE_NO_ABASTECEN_PARTE(2);
END;

--* 4.1.16 - Obtenga el nombre de proveedor para los proveedores que abastecen todas las partes.
CREATE OR REPLACE PROCEDURE PROVEEDORES_QUE_ABASTECEN_TODAS_LAS_PARTES
AS
    CURSOR SUPPLIERS_CURSOR IS
        SELECT S.SNAME
        FROM SUPPLIERS S
        WHERE NOT EXISTS (
            SELECT P.PNUM
            FROM PARTS P
            WHERE NOT EXISTS (
                SELECT 1
                FROM SHIPMENTS SP
                WHERE SP.SNUM = S.SNUM AND SP.PNUM = P.PNUM
            )
        );
BEGIN
    FOR SUPPLIERS_REC IN SUPPLIERS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('Nombre Proveedor: ' || SUPPLIERS_REC.SNAME);
    END LOOP; 
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    PROVEEDORES_QUE_ABASTECEN_TODAS_LAS_PARTES;
END;

--* 4.1.17 - Obtenga el número de parte para todas las partes que pesan más de 16 libras ó son abastecidas por el proveedor S2, ó cumplen con ambos criterios.
CREATE OR REPLACE PROCEDURE PARTES_PESADAS_O_ABASTECIDAS_POR_PROVEEDOR (
    P_SNUM IN SUPPLIERS.SNUM%TYPE
)
AS
    CURSOR PARTS_CURSOR IS
        SELECT P.PNUM
        FROM PARTS P
        WHERE P.WEIGHT > 16
            OR EXISTS (
                SELECT 1
                FROM SHIPMENTS SP
                WHERE SP.PNUM = P.PNUM AND SP.SNUM = P_SNUM
            );
BEGIN
    FOR PARTS_REC IN PARTS_CURSOR
    LOOP
        DBMS_OUTPUT.PUT_LINE('N° Parte: ' || PARTS_REC.PNUM);
    END LOOP;
END;
-- Test
SET SERVEROUTPUT ON;
BEGIN
    PARTES_PESADAS_O_ABASTECIDAS_POR_PROVEEDOR(2);
END;